{
	"name": "dezog",
	"displayName": "DeZog",
	"version": "2.1.7",
	"publisher": "maziac",
	"description": "Visual Studio Code Debugger for the Z80/ZX Spectrum.",
	"author": {
		"name": "Thomas Busse"
	},
	"license": "MIT",
	"keywords": [
		"debugger",
		"debug",
		"z80",
		"z80-debug",
		"dezog",
		"zesarux",
		"zx",
		"spectrum",
		"assembler",
		"z80asm",
		"sjasmplus"
	],
	"engines": {
		"vscode": "^1.52.0",
		"node": "^7.9.0"
	},
	"icon": "assets/icon.png",
	"categories": [
		"Debuggers"
	],
	"private": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/maziac/DeZog"
	},
	"scripts": {
		"compile": "tsc -p ./",
		"tslint": "eslint ./**/*.ts",
		"watch": "tsc -w -p ./",
		"test": "mocha -u tdd ./out/tests/",
		"package": "vsce package",
		"publish": "vsce publish"
	},
	"files": [],
	"dependencies": {
		"await-notify": "1.0.1",
		"binary-file": "^0.2.3",
		"gif-writer": "^0.9.4",
		"glob": "^7.1.6",
		"jsonc-parser": "^2.3.1",
		"node-gzip": "^1.1.2",
		"posthtml": "^0.15.1",
		"posthtml-toc": "^1.0.3",
		"rng": "^0.2.2",
		"showdown": "^1.9.1",
		"ts-node": "^8.10.2",
		"vscode-debugadapter": "^1.43.0",
		"vscode-debugprotocol": "1.39.0"
	},
	"devDependencies": {
		"@types/mocha": "7.0.2",
		"@types/node": "13.9.5",
		"@types/vscode": "^1.52.0",
		"electron-rebuild": "^1.11.0",
		"mocha": "^8.2.1",
		"tslint": "^6.1.3",
		"typescript": "^4.1.5",
		"vscode-debugadapter-testsupport": "1.40.2"
	},
	"resolutions": {
		"minimist": "^1.2.5"
	},
	"bugs": {
		"url": "https://github.com/maziac/DeZog/issues"
	},
	"main": "./out/src/extension",
	"activationEvents": [
		"*"
	],
	"contributes": {
		"views": {
			"debug": [
				{
					"type": "webview",
					"id": "dezog.helpview",
					"name": "DeZog Help",
					"icon": "assets/help_icon.svg",
					"contextualTitle": "DeZog Help",
					"when": "config.dezog.showHelp"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "DeZog configuration",
			"properties": {
				"dezog.showHelp": {
					"description": "Enables the 'DeZog Help' view in the debug sidebar.",
					"type": "boolean",
					"scope": "resource",
					"default": true
				},
				"dezog.log.global": {
					"description": "Write global logs to an output panel.",
					"type": "boolean",
					"scope": "resource",
					"default": false
				},
				"dezog.log.socket": {
					"description": "Write socket logs to an output panel.",
					"type": "boolean",
					"scope": "resource",
					"default": false
				},
				"dezog.log.customCode": {
					"description": "Write logs regarding custom (js) code to an output panel.",
					"type": "boolean",
					"scope": "resource",
					"default": true
				},
				"dezog.donated": {
					"description": "If you donated (press the donate button in the help) you can hide the button by setting this parameter.",
					"type": "boolean",
					"scope": "resource",
					"default": false
				}
			}
		},
		"languages": [
			{
				"id": "asm-collection",
				"extensions": [
					".list",
					".lis",
					".a80",
					".asm",
					".inc",
					".s"
				],
				"aliases": [
					"Assembler file"
				]
			}
		],
		"breakpoints": [
			{
				"language": "asm-collection"
			},
			{
				"language": "z80-macroasm"
			},
			{
				"language": "z80-asm"
			},
			{
				"language": "zeus-asm"
			},
			{
				"language": "gbz80"
			},
			{
				"language": "pasmo"
			}
		],
		"commands": [
			{
				"command": "dezog.whatsNew",
				"title": "Show 'What's New' page of this DeZog release.",
				"category": "dezog"
			},
			{
				"command": "dezog.help",
				"title": "Show the DeZog Help page.",
				"category": "dezog"
			},
			{
				"command": "dezog.movePCtoCursor",
				"title": "Move Program Counter to Cursor",
				"category": "dezog"
			},
			{
				"command": "dezog.clearAllDecorations",
				"title": "Clear all decorations",
				"category": "dezog"
			},
			{
				"command": "dezog.runAllUnitTests",
				"title": "Run all unit tests",
				"category": "dezog"
			},
			{
				"command": "dezog.debugAllUnitTests",
				"title": "Run all unit tests in debug mode",
				"category": "dezog"
			},
			{
				"command": "dezog.cancelUnitTests",
				"title": "Cancels all running unit test cases.",
				"category": "dezog"
			},
			{
				"command": "dezog.getAllUnitTests",
				"title": "Get all unit test case labels.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.initUnitTests",
				"title": "Initializes partial unit testing.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.execUnitTestCase",
				"title": "(Delayed) execution of one unit test case.",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.runPartialUnitTests",
				"title": "Run all unit test cases (from execUnitTestCase).",
				"category": "dezog-partial-unit-testing"
			},
			{
				"command": "dezog.debugPartialUnitTests",
				"title": "Run all unit test cases (from execUnitTestCase) in debug mode.",
				"category": "dezog-partial-unit-testing"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "dezog.whatsNew"
				},
				{
					"command": "dezog.runAllUnitTests"
				},
				{
					"command": "dezog.debugAllUnitTests"
				},
				{
					"command": "dezog.movePCtoCursor",
					"when": "false"
				},
				{
					"command": "dezog.clearAllDecorations"
				},
				{
					"command": "dezog.getAllUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.execUnitTestCase",
					"when": "false"
				},
				{
					"command": "dezog.debugPartialUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.runPartialUnitTests",
					"when": "false"
				},
				{
					"command": "dezog.initUnitTests",
					"when": "false"
				}
			],
			"editor/context": [
				{
					"when": "resourceLangId == asm-collection && inDebugMode",
					"command": "dezog.movePCtoCursor",
					"group": "debug"
				}
			]
		},
		"debuggers": [
			{
				"type": "dezog",
				"label": "DeZog",
				"program": "./out/emuldebugadapter.js",
				"runtime": "node",
				"configurationAttributes": {
					"launch": {
						"required": [
							"remoteType",
							"rootFolder"
						],
						"properties": {
							"remoteType": {
								"type": "string",
								"description": "It is possible to use DeZog with different remotes. Here you choose the type, i.e. 'zrcp' (ZEsarUX), 'zxnext' or 'zxsim' (internal Z80 simulator). Note: Certain features or properties are not available in all types.",
								"default": "zrcp"
							},
							"zrcp": {
								"hostname": {
									"type": "string",
									"description": "The hostname/IP address of the ZEsarUX Emulator."
								},
								"port": {
									"type": "number",
									"description": "The port of the ZEsarUX Emulator."
								},
								"loadDelay": {
									"type": "number",
									"description": "An additional delay before the assembler program is loaded in ZEsarUX. Use this only if you have problems starting the debug session on Windows. Default: 100ms on Windows, 0ms on other systems."
								},
								"skipInterrupt": {
									"type": "boolean",
									"description": "Skips the interrupt during stepping. Defaults to false."
								},
								"resetOnLaunch": {
									"type": "boolean",
									"description": "Resets the device after starting the debugger before starting the program to debug. Defaults to true."
								},
								"socketTimeout": {
									"type": "number",
									"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
								}
							},
							"cspect": {
								"hostname": {
									"type": "string",
									"description": "The hostname/IP address of the CSpect socket."
								},
								"port": {
									"type": "number",
									"description": "The port of the CSpect socket."
								},
								"socketTimeout": {
									"type": "number",
									"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
								}
							},
							"zsim": {
								"zxKeyboard": {
									"type": "boolean",
									"description": "If enabled the simulator shows a keyboard to simulate keypresses.",
									"default": true
								},
								"zxInterface2Joy": {
									"type": "boolean",
									"description": "If enabled the simulator shows  a pad to simulate the joysticks for ZX Interface 2.",
									"default": true
								},
								"kempstonJoy": {
									"type": "boolean",
									"description": "If enabled the simulator shows a pad to simulate the Kempston joystick at port 0x1F.",
									"default": true
								},
								"visualMemory": {
									"type": "boolean",
									"description": "If enabled the simulator shows the access to the memory (0-0xFFFF) visually while the program is running.",
									"default": true
								},
								"memoryModel": {
									"type": "string",
									"description": "Chooses the right memory model. I.e. how the memory maps if more than 64k is available.\nPossible values:\n'RAM': One memory area of 64K, no banks.\n- 'ZX48K': ROM and RAM as of the ZX Spectrum 48K.\n- 'ZX128K': Banked memory as of the ZX Spectrum 48K (16k slots/banks).\n- 'ZXNEXT': Banked memory as of the ZX Next (8k slots/banks). The default depends on the banking settings.",
									"default": "RAM"
								},
								"ulaScreen": {
									"type": "boolean",
									"description": "If enabled it shows the contents of the ZX Spectrum screen.",
									"default": true
								},
								"zxBorderWidth": {
									"type": "number",
									"description": "The displayed border width in pixels. If set to 0 then no border is displayed. Works only if ulaScreen is set to true.",
									"default": true
								},
								"zxBeeper": {
									"type": "boolean",
									"description": "Enables ZX Spectrum sound through it's beeper.",
									"default": true
								},
								"audioSampleRate": {
									"type": "number",
									"description": "The sample rate used for audio. Defaults to 22050 Hz.",
									"default": 22050
								},
								"cpuLoadInterruptRange": {
									"type": "number",
									"description": "The number of interrupts to calculate the CPU-load average from. 0 to disable.",
									"default": 1
								},
								"Z80N": {
									"type": "boolean",
									"description": "Default is false. If enabled the Z80N extended instructions are supported. Default: If 'tbblueMemoryManagementSlots' defaults to true, otherwise false.",
									"default": false
								},
								"vsyncInterrupt": {
									"type": "boolean",
									"description": "Default is true if some ZX Spectrum feature is enabled otherwise false. If enabled an interrupt is generated after ca. 20ms (this assumes a CPU clock of 3.5MHz).",
									"default": false
								},
								"cpuFrequency": {
									"type": "number",
									"description": "The CPU frequency is only used for output. I.e. when the t-states are printed there is also a printout of the correspondent time. This is calculated via the CPU frequency here.",
									"default": 3500000
								},
								"limitSpeed": {
									"type": "number",
									"description": "If enabled the simulated CPU performance is throttled to fit the given PU frequency. Is enabled by default. If disabled the CPU will be simulated as fast as possible.",
									"default": false
								},
								"updateFrequency": {
									"type": "number",
									"description": "The update frequency of the simulator view in Hz. Defaults to 10 Hz. Possible range is 5 to 100 Hz.",
									"default": 10
								},
								"defaultPortIn": {
									"type": "number",
									"description": "The default value that is read if the read port is unused.",
									"default": 255
								},
								"customCode": {
									"debug": {
										"type": "boolean",
										"description": "If true the zsim simulator view is put in debug mode which makes it easier to develop additional javascript code (see jsPath).",
										"default": false
									},
									"jsPath": {
										"type": "string",
										"description": "A relative path to additional javascript code that is included into the Z80 simulator."
									},
									"uiPath": {
										"type": "string",
										"description": "A relative path to additional javascript code that is included into the Z80 simulator view/UI. This code acts as UI for the code in 'jsPath'"
									},
									"timeStep": {
										"type": "number",
										"description": "You can set a time step (interval) to call the tick() function. If not set then tick() will not be called (although time/t-states still do advance)."
									}
								}
							},
							"zxnext": {
								"hostname": {
									"type": "string",
									"description": "The hostname/IP address of the socket of the DeZog Serial Interface program. As this usually runs on the same PC as DeZog itself this parameter can be omitted (localhost).",
									"default": "localhost"
								},
								"port": {
									"type": "string",
									"description": "The port number of the socket of the DeZog Serial Interface program.Defaults to 12000.",
									"default": "12000"
								}
							},
							"unitTests": {
								"type": "boolean",
								"description": "Whether the configuration contains the unit tests or not. Default: false."
							},
							"rootFolder": {
								"type": "string",
								"description": "The path of the root folder. All other paths are relative to this. Usually set to ${workspaceFolder}."
							},
							"sjasmplus": {
								"type": "array",
								"description": "All sjasmplus list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										},
										"disableBanking": {
											"type": "boolean",
											"description": "SLD files bank information to the addresses. If this is set all addresses are turned into simple 64k addresses as with list files.",
											"default": false
										}
									}
								}
							},
							"z80asm": {
								"type": "array",
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here either as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										}
									}
								}
							},
							"z88dk": {
								"type": "array",
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										},
										"mainFile": {
											"type": "string",
											"description": "Path to the main assembler source file that was used to produce the .list file.",
											"default": null
										},
										"mapFile": {
											"type": "string",
											"description": "Is required only for z88dk. The map file is required to correctly parse the label values and to get correct file/line to address associations.",
											"default": 0
										}
									}
								}
							},
							"smallValuesMaximum": {
								"type": "number",
								"description": "Interprets labels as address if value is bigger. Typically this is e.g. 512. So all numbers below are not treated as addresses if shown. So most constant values are covered with this as they are usually smaller than 512. Influences the formatting.",
								"default": 512
							},
							"disassemblerArgs": {
								"description": "Arguments passed to the disassembler.",
								"properties": {
									"numberOfLines": {
										"type": "number",
										"description": "The number of lines displayed in the disassembly.",
										"default": 10
									},
									"esxdosRst": {
										"type": "boolean",
										"description": "For esxdos disassembly set this to 'true'.",
										"default": false
									}
								}
							},
							"tmpDir": {
								"type": "string",
								"description": "A directory for temporary files created by this debug adapter. Used e.g. for disassemblies. E.g. '.tmp'"
							},
							"topOfStack": {
								"type": "string",
								"description": "(Optional) You should set this to the label or address which is above the topmost entry on the stack. It is used to determine the end of the call stack."
							},
							"execAddress": {
								"type": "string",
								"description": "The start address of program execution. Use a label or a number. Can only be omitted of a .sna file is loaded."
							},
							"load": {
								"type": "string",
								"description": "(Optional) Load a .tap or .sna file into the emulator on startup of the debug session."
							},
							"loadObjs": {
								"type": "array",
								"description": "List of one or many object files, i.e. memory dumps. Contains of 'path' and 'start' address. (Optional)",
								"items": {
									"type": "object",
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the object file (.o/.obj) file."
										},
										"start": {
											"type": "string",
											"description": "The start address, e.g. 32768. Defaults to 0."
										}
									}
								}
							},
							"startAutomatically": {
								"type": "boolean",
								"description": "Start automatically after launch. Default is false."
							},
							"commandsAfterLaunch": {
								"type": "array",
								"description": "An array with commands that are executed after the program-to-debug is loaded. With '-e' or '-exec' you can pass commands to the debugger directly.",
								"items": {
									"type": "string"
								}
							},
							"history": {
								"reverseDebugInstructionCount": {
									"type": "number",
									"description": "Sets the number of instructions for reverse debugging. If set to 0 then reverse debugging is turned off. Default is 10000."
								},
								"spotCount": {
									"type": "number",
									"description": "Sets the number of instructions to show in a spot. If you set this e.g. to 5 then the 5 previous and the 5 next instructions related to the current position are shown. Use 0 to disable. Default is 10."
								},
								"spotShowRegisters": {
									"type": "boolean",
									"description": "If true it shows the changed register values in the spot history. You can disable the feature here. Defaults to true."
								},
								"codeCoverageEnabled": {
									"type": "boolean",
									"description": "Enables/disables code coverage. Default is 'true."
								}
							},
							"formatting": {
								"registerVar": {
									"type": "array",
									"description": "Defines the formatting of the registers when displayed in the VARIABLES area. E.g. as hex value or as integer. Also allows to display labels and various other formats. Use:\n${name} = the name of the register, e.g. HL\n${hex} = value as hex, e.g. A9F5\n${dhex} = value as hex with space between bytes, e.g. A9 F5\n${unsigned} = value as unsigned, e.g. 1234\n$(signed) = value as signed, e.g. -59\n$(bits) = value as bits , e.g. 10011011\n$(flags) = value interpreted as status flags (only useful for F and F'), e.g. ZNC\n${labels} = value as label (or several labels)\n{labelsplus} = value as label (or several labels) plus an index/offset\n${pre:labels:join} = value as label (or several labels). If no label is found nothing is printed. If at least 1 label is found the 'pre' string is printed followed by the label(s). If more than 1 label is found they are concatenated with the 'join' string.\nNote: The ${b@:...} prefix is not allowed in for the VARIABLES section.",
									"items": {
										"type": "string"
									}
								},
								"registerHover": {
									"type": "array",
									"description": "Format how the registers are displayed when hovering with the mouse. Is an array with 2 strings tuples. The first is an regex that checks the register. If fulfilled the 2nd is used to format the value.",
									"items": {
										"type": "string"
									}
								},
								"bigValues": {
									"type": "string",
									"description": "The general formatting for address labels bigger than 'smallValuesMaximum'."
								},
								"smallValues": {
									"type": "string",
									"description": "The general formatting for small values like constants smaller/equal than 'smallValuesMaximum'."
								},
								"watchByte": {
									"type": "string",
									"description": "The 'byte' formatting for labels in the WATCHes area."
								},
								"watchWord": {
									"type": "string",
									"description": "The 'word' formatting for labels in the WATCHes area."
								},
								"stackVar": {
									"type": "string",
									"description": "Format for the pushed values in the STACK area."
								}
							},
							"memoryViewer": {
								"addressColor": {
									"type": "string",
									"description": "The text color of the address field."
								},
								"bytesColor": {
									"type": "string",
									"description": "The color of the bytes shown in hex."
								},
								"asciiColor": {
									"type": "string",
									"description": "The text color of the ascii field."
								},
								"addressHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the address when hovering."
								},
								"valueHoverFormat": {
									"type": "string",
									"description": "see registerVarFormat. Format for the value when hovering."
								},
								"registerPointerColors": {
									"type": "array",
									"description": "An array with register/color pairs. All selected register will appear with the correspondent color in the memory view. Registers not chosen will not appear.",
									"items": [
										{
											"type": "string"
										},
										{
											"type": "string"
										}
									],
									"default": [
										"HL",
										"darkgreen",
										"DE",
										"darkcyan",
										"BC",
										"dimgray",
										"IX",
										"darkorange",
										"IY",
										"darkviolet"
									]
								},
								"registersMemoryView": {
									"type": "array",
									"description": "An array of register to show in the register memory view. This view is automatically opened at startup and shows the memory the registers point to. E.g. [ 'HL', 'DE', 'IX' ].",
									"items": {
										"type": "string"
									},
									"default": [
										"HL",
										"DE",
										"BC",
										"IX",
										"IY"
									]
								}
							},
							"unitTestTimeout": {
								"type": "number",
								"description": "(Optional) The timeout for unit tests. If a test lasts longer it is assumed as failed. In secs. Default = 5s."
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "dezog",
						"request": "launch",
						"name": "Simulator",
						"remoteType": "zsim",
						"zsim": {
							"memoryModel": "ZX48K",
							"vsyncInterrupt": true,
							"ulaScreen": true,
							"zxKeyboard": true
						},
						"sjasmplus": [
							{
								"path": "your_sld_file"
							}
						],
						"topOfStack": "your_stack_top",
						"load": "your_sna_or_nex_file"
					},
					{
						"type": "dezog",
						"request": "launch",
						"name": "ZEsarUX",
						"remoteType": "zrcp",
						"sjasmplus": [
							{
								"path": "your_sld_file"
							}
						],
						"topOfStack": "your_stack_top",
						"load": "your_sna_or_nex_file"
					},
					{
						"type": "dezog",
						"request": "launch",
						"name": "CSpect",
						"remoteType": "cspect",
						"sjasmplus": [
							{
								"path": "your_sld_file"
							}
						],
						"topOfStack": "your_stack_top",
						"load": "your_sna_or_nex_file"
					},
					{
						"type": "dezog",
						"request": "launch",
						"name": "ZXNext",
						"remoteType": "zxnext",
						"sjasmplus": [
							{
								"path": "your_sld_file"
							}
						],
						"topOfStack": "your_stack_top",
						"load": "your_sna_or_nex_file"
					}
				],
				"configurationSnippets": [
					{
						"label": "DeZog: Launch",
						"description": "Configuration for DeZog.",
						"body": {
							"type": "dezog",
							"request": "launch",
							"name": "DeZog",
							"remoteType": "zsim",
							"zsim": {
								"memoryModel": "RAM"
							},
							"zrcp": {},
							"cspect": {},
							"zxnext": {
								"port": "/dev/tty.usbserial"
							},
							"topOfStack": "stack_top",
							"sjasmplus": [
								{
									"path": "path_to_your_assembler_file.list"
								}
							],
							"disassemblerArgs": {
								"esxdosRst": true
							},
							"load": "path_to_your_sna_file.sna",
							"codeCoverage": false
						}
					}
				]
			}
		]
	}
}
